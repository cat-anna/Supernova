#include <stdio.h>
#include <string.h>
#include <vector>

enum TOutTypes
{
	otAsm,
	otC,	
};

TOutTypes StrToOutF(char* s)
{
	return otAsm;	
}

using namespace std;
/*
vector<char*> infiles;
vector<char*> tabs;
vector<int> filesize;
vector<char*> filenames;
vector<char*> ifiles;
*/
char *infile = 0;
char *outfile = 0;
char *dName = 0;
TOutTypes outFType = otAsm;
bool Compile = false;

char* section = ".data";

int main(int argc, char *argv[])
{
	if(argc == 1) {
		printf("file2o: Not enough parameters. Process stopped.\n");
		return 1;
	}
	for(int i = 1; i < argc; i++)
	{
		if(!strcmp(argv[i], "-o"))outfile = argv[++i];			
		else if(!strcmp(argv[i], "-t"))outFType = StrToOutF(argv[++i]);	
		else if(!strcmp(argv[i], "-n"))dName = argv[++i];	
		else if(!strcmp(argv[i], "-c"))Compile = true;	
		else if(!strcmp(argv[i], "-s"))section = argv[++i];		
		else 
			infile = argv[i];
	}	
	
	if(dName == 0) dName = infile;
	
	FILE *outF = fopen(outfile, "w");
	if(outF == NULL){
		printf("file2o: Error creating output file.\n");
		return 2;	
	}
	
	FILE *inF = fopen(infile, "rb");
	if(inF == NULL){
		printf("file2o: Error opening input file.\n");
		fclose(outF);	
		return 3;	
	}
	
	switch(outFType){
		case otAsm:
				fprintf(outF, ";File generated by file2o\n\n");	
				fprintf(outF, "[global %s]\n[global %s_size]\n\n", dName, dName, dName);				
				fprintf(outF, "[section %s]\nbits 32\n\n", section);
				fprintf(outF, "%s dd $ + 4\n db ", dName);
				int read = 0;
				while(!feof(inF)){
					read %= 16;	
				//	if(read == 0)fprintf(outF, "\n");
				//	if(read < 16 && read > 0)fprintf(outF, ", ");
					unsigned c = fgetc(inF);
					if(c > 256)break;
					fprintf(outF, "0x%.2x, ", c);
					read++;
				}					
				fprintf(outF, "\n%s_size dd $ - %s - 4\n", dName, dName);		
		//		fprintf(outF, "%s_size dd %s_end - %s\n", dName, dName, dName);
			break;	
	}
		
/*
//	if(createh)fprintf(out, "#include \"%s\"\n", outfile_h);
	
	for (int i = 0; i < ifiles.size(); i++)
	{
		fprintf(out, "#include \"%s\"\n", ifiles.at(i));
	}	
	fprintf(out, "\n");
	for (int i = 0; i < infiles.size(); i++)	
	{				
		char *it = infiles.at(i);
	//	printf("%s\n", it);
		FILE *in = fopen(it, "rb");
		if(in == NULL)return 3;
		char *tabname = strrchr(it, '\\');
		if(!tabname)tabname = strrchr(it, '/');
		if(!tabname) tabname = it;
		else tabname++;
		char *tabfname = new char[strlen(tabname)+1];
		strcpy(tabfname, tabname);
		filenames.push_back(tabfname);		
		tabs.push_back(tabname);
		char* filedot = strchr(tabname, '.');
		if(filedot)*filedot = '_';

		fprintf(out, "const unsigned char if_%s[] = {", tabname);
		int read = 0;
		while(!feof(in)){
			if((read % 16) == 0)fprintf(out, "\n\t");
			unsigned c = fgetc(in);
			if(c > 256)break;
			fprintf(out, "0x%.2x, ", c);
			read++;
		}
		filesize.push_back(read);
		fprintf(out, "\n};//%d\n\n", read);	
		fclose(in);	
	}*/
	
/*	fprintf(out, "\nconst InternalFile_t InternalFilesTable[] = {\n");
	
	for (int i = 0; i < infiles.size(); i++)
	{
		fprintf(out, "\t{\"%s\",\tif_%s,\t%d},\n", filenames.at(i), tabs.at(i), filesize.at(i));
		delete filenames.at(i);
	}	
	fprintf(out, "\t{0, 0, 0},//empty filed indicates end of table\n");
	fprintf(out, "};\n\n");	
	fclose(out);
	*/
/*	if(!createh)return 0;
	char* filedot = strrchr(outfile_c, '.');
	if(filedot)*++filedot = 'h';
	out = fopen(outfile_c, "w");
	if(out == NULL)return 4;	
	fprintf(out, "\ntypedef struct {\n\tchar *fname;\n\tconst unsigned char *fdata;\n\tunsigned fsize;\n} cInternalFile;\n\n");
	fprintf(out, "extern cInternalFile InternalFilesTable;\n\n");*/
	fclose(outF);
	fclose(inF);	
	return 0;
}
